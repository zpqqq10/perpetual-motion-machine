#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cstdarg>
#include <getopt.h>

#include "main.h"
#include "utils.h"
#include "declaration.h"
#include "codeGen.h"

using namespace std;

/*
 * global options
 */
bool option_debug = false;
string file_output = "a.out";
string file_input;
bool option_show_ast = false;
bool option_show_ir = false;
bool option_output_ir = false;
bool option_output_bc = false;
bool option_output_as = false;
bool option_output_bin = false;
/*
 * extern function declaration
 */
extern int yyparse();
extern FILE * yyin;
/*
 * function declaration
 */
static void usage(FILE *stream, const char *progname);
void warning(const char *msg, ...);
void NO_RETURN error(const char *msg, ...);
void debugImpl(const char *msg, ...);

/*
 * type declaration
 */
enum Option
{
	OPTION_DEBUG,
	OPTION_OUTPUT,
	OPTION_AST,
	OPTION_IR,
	OPTION_IRR,
	OPTION_AS,
	OPTION_BC,
	OPTION_BIN,
	OPTION_HELP
};

Program* prog = new Program();
extern VarDeclList vardecllist;

int main(int argc, char** argv)
{
	// const int req_arg = required_argument; /*opt_arg = optional_argument,*/
	const int   req_arg = required_argument, 
				no_arg  = no_argument;
	static const struct option long_options[] =
    {
        {"debug",         no_arg,  nullptr, OPTION_DEBUG},
		{"help",          no_arg,  nullptr, OPTION_HELP},
		{"show-ast",	  no_arg,  nullptr, OPTION_AST},
		{"show-ir", 	  no_arg,  nullptr, OPTION_IR},
		{"output",		  req_arg, nullptr, OPTION_OUTPUT},
		{"ir",            no_arg,  nullptr, OPTION_IRR},
		{"assembly",	  no_arg,  nullptr, OPTION_AS},
		{"bitcode",       no_arg,  nullptr, OPTION_BC},
		{"binary",        no_arg,  nullptr, OPTION_BIN},
        {nullptr,         no_arg,  nullptr, 0}
    }; 
	
	while(true)
	{
		int idx;
		int opt = getopt_long_only(argc, argv, "aho:", long_options, &idx);
		if (opt < 0)
			break;
		switch(opt)
		{
			case OPTION_DEBUG:
				option_debug = true;
				break;
			case OPTION_HELP:
			case 'h':
				usage(stdout, argv[0]);
				return 0;
			case OPTION_OUTPUT:
			case 'o':
				file_output = optarg;
				break;
			case OPTION_AST:
				option_show_ast = true;
				break;
			case OPTION_IR:
				option_show_ir = true;
				break;
			case OPTION_IRR:
				option_output_ir = true;
				break;
			case OPTION_BC:
				option_output_bc = true;
				break;
			case OPTION_AS:
				option_output_as = true;
				break;
			case OPTION_BIN:
				option_output_bin = true;
				break;
				
		}
	}
	if( !option_output_ir && !option_output_as && !option_output_bc && !option_output_bin)
	{
		option_output_ir = true;
	}
	if ((option_output_ir + option_output_bc + option_output_as + option_output_bin) != 1)
	{
		error("ambiguous output type, remote redundant option; try `--help' for more information");
		return EXIT_FAILURE;
	}
	if (optind != argc-1)
    {
        error("missing input file; try `--help' for more information");
        return EXIT_FAILURE;
    }
	file_input = argv[optind];
	yyin = fopen(file_input.c_str(), "r+");
	yyparse();
	if(prog){
		if(option_show_ast)
			prog->print();
		prog->CodeGen();
	}
	else {
		cout << "nothing" << endl;
	}
	return 0;
}

static void usage(FILE *stream, const char *progname)
{
	fprintf(stream, "Usage: %s [OPTIONS] file \n\n"
		"OPTIONS:\n"
		"\t--debug[=false]\n"
		"\t\tEnable [disable] debug log messages.\n"
		"\t\tDefault: false (disabled)\n"
		"\n"
		"\t--help, -h\n"
        "\t\tPrint this help message.\n"
		"\n"
		"\t--show-ast[=false]\n"
		"\t\tDisplay the AST.\n"
		"\t\tDefault: false (disabled)\n"
		"\n"
		"\t--show-ir[=false]\n"
		"\t\tDisplay the LLVM::IR generated by CodeGen\n"
		"\t\tDefault: false (disabled)\n"
		"\t--output, -o <file>\n"
		"\t\tPlace the output into <file>.\n"
		"\t\tDefalut: a.out\n"
		"\n"
		"\t--ir[=true]\n"
		"\t\tOutput the IR Code to file\n"
		"\t\tDefault: true (enabled)\n"
		"\n"
		"\t--bitcode[=false]\n"
		"\t\tOutput the Bitcode to file\n"
		"\t\tDefault: false (disabled)\n"
		"\n"
		"\t--assembly[=false]\n"
		"\t\tOutput the Assembly to file\n"
		"\t\tDefault: false (disabled)\n"
		"\n"
		"\t--binary[=false]\n"
		"\t\tOutput the Binary to file\n"
		"\t\tDefault: false (disabled)\n"
        "\n",
		progname);
}

/*  
 * Report an error and exit.
 */
void NO_RETURN error(const char *msg, ...)
{
    fprintf(stderr, "%serror%s: ", "\33[31m", "\33[0m");

    va_list ap;
    va_start(ap, msg);
    vfprintf(stderr, msg, ap);
    va_end(ap);
    
    putc('\n', stderr);

    _Exit(EXIT_FAILURE);
}

/*
 * Print a warning message.
 */
void warning(const char *msg, ...)
{
    fprintf(stderr, "%swarning%s: ", "\33[33m",  "\33[0m");

    va_list ap;
    va_start(ap, msg);
    vfprintf(stderr, msg, ap);
    va_end(ap);
    
    putc('\n', stderr);
}

void debugImpl(const char *msg, ...)
{
    fprintf(stderr, "%sdebug%s: ","\33[35m", "\33[0m");

    va_list ap;
    va_start(ap, msg);
    vfprintf(stderr, msg, ap);
    va_end(ap);

    putc('\n', stderr);
}

