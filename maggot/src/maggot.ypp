%{
#include <iostream>
#include <string>
#include "main.h"
#include "declaration.h"
#include "expression.h"
#include "statement.h"
using namespace std;

extern Program* prog;

extern int yylex(void);

extern int yyparse();
int yyerror(const char *s);

%}

%union
{
	BaseAST* node;
	BaseAST** list;
	int valueType;
	std::string* str;
	char Op;
	std::string* valuetext;
	// BaseAST* node;
}

%token COLON SEMICOLON COMMA LEFTP RIGHTP LEFTB RIGHTB LEFTSB RIGHTSB DQUOTE SQUOTE
%token RETURN FOR IN TO WHILE IF ELSE BREAK EXTERN
%token <str> IDENTIFIER STRING_VALUE COMMENT
%token INT FLOAT BOOL VOID STRING CHAR CHARPTR
%token <valuetext> INTEGER_VALUE FLOAT_VALUE FALSE TRUE CHAR_VALUE
%token ASSIGN GT LT EQ NEQ GE LE AND OR XOR

%left  <Op> GT LT EQ NEQ GE LE
%left  <Op> ADD SUB
%left  <Op> MUL DIV
%right <Op> UMINUS

// %type <varDecl> var

%type <valueType> type_specifier
%type <node> value factor term variable expression addition relation_expr stmt expression_stmt stmt_list compound_stmt vars var var_decl func_decl decl proto_decl params param_list param return_stmt selection_stmt iteration_stmt call args arg_list
%start program

%%

program: decl_list {;}
	   ;

decl_list: decl_list decl {if($2) prog->children.push_back($2);}
		 | decl {if($1) prog->children.push_back($1);}
		 ;

// one declaration of global variables / function / prototype / comment
decl: var_decl {$$ = $1; dynamic_cast<VarDeclList *>$$->setGlobal(true);}
	| func_decl {$$ = $1;}
	| proto_decl {$$ = $1;}
	| COMMENT {$$ = nullptr;} 
	;

// variable declaration
var_decl: type_specifier vars SEMICOLON {$$ = $2; dynamic_cast<VarDeclList *>$2->settype($1);}
		; 

vars: vars COMMA var {$$ = $1;dynamic_cast<VarDeclList *>$$->addvar(dynamic_cast<VarDeclAST *>$3);}
	| var {$$ = new VarDeclList();dynamic_cast<VarDeclList *>$$->addvar(dynamic_cast<VarDeclAST *>$1);}
	;

var: IDENTIFIER {$$ = new VarDeclAST(*$1);}
   | IDENTIFIER LEFTSB INTEGER_VALUE RIGHTSB {$$ = new VarDeclAST(*$1, stoi(*$3));}
   | IDENTIFIER ASSIGN expression {$$ = new VarDeclAST(*$1); $$->children.push_back($3);}
   | IDENTIFIER LEFTSB INTEGER_VALUE RIGHTSB ASSIGN value {$$ = new VarDeclAST(*$1, stoi(*$3)); $$->children.push_back($6);}
   ;

type_specifier: INT {$$ = TYPEINT;}
			  | FLOAT {$$ = TYPEFLOAT;}
			  | BOOL {$$ = TYPEBOOL;}
			  | VOID {$$ = TYPEVOID;}
			  | CHAR {$$ = TYPECHAR;}
			  /* | STRING {$$ = TYPESTRING;} */
			  ;

// function definition
func_decl: type_specifier IDENTIFIER LEFTP params RIGHTP compound_stmt {BaseAST* f = new FuncAST($1, *$2);f->children.push_back($4);f->children.push_back($6);$$ = f;}
		 ;

// prototype declaration
proto_decl: type_specifier IDENTIFIER LEFTP params RIGHTP SEMICOLON {BaseAST* f = new ProtoAST($1, *$2);f->children.push_back($4);$$ = f;} 
		  /* | EXTERN type_specifier IDENTIFIER LEFTP params RIGHTP SEMICOLON {BaseAST* f = new ProtoAST($1, *$2);f->children.push_back($4);$$ = f;}  */
		  ;


// parameters of a function declaration or a function definition
params: param_list {$$ = $1;} 
	  | VOID {$$ = new ParmVarDeclList(true);} 
	  | {$$ = new ParmVarDeclList(true);} 
	  ;

param_list: param_list COMMA param {$$ = $1;dynamic_cast<ParmVarDeclList *>$$->addvar(dynamic_cast<ParmVarDeclAST *>$3);}
		  | param {$$ = new ParmVarDeclList();dynamic_cast<ParmVarDeclList *>$$->addvar(dynamic_cast<ParmVarDeclAST *>$1);} 
		  ;

param: type_specifier IDENTIFIER {$$ = new ParmVarDeclAST(*$2); dynamic_cast<ParmVarDeclAST *>$$->settype($1);} 
	  | type_specifier IDENTIFIER LEFTSB RIGHTSB {$$ = new ParmVarDeclAST(*$2); dynamic_cast<ParmVarDeclAST *>$$->settype($1 + TYPEPTR);} 
	 ;

// begin with { and end with }
compound_stmt: LEFTB stmt_list RIGHTB {$$ = $2;}
			 ;

// statements
stmt_list: stmt_list stmt {
							if($1 == nullptr)
								$$ = new CompoundStmtAST();
							else
								$$ = $1;
							if($2 != nullptr)
								$$->children.push_back($2);

							}
		 | {$$ = new CompoundStmtAST();}
		 ;

stmt: expression_stmt {$$ = $1;}
	| compound_stmt {$$ = $1;}
	| selection_stmt {$$ = $1;} 		
	| iteration_stmt {$$ = $1;}			
	| return_stmt {$$ = $1;} 			
	| var_decl {$$ = $1; dynamic_cast<VarDeclList *>$$->setGlobal(false);}
	| COMMENT {$$ = nullptr;}
	;

// expression
expression_stmt: expression SEMICOLON {$$ = $1;}
			   | SEMICOLON {;}
			   ;

// if else
// this dangling ELSE raises a s/r conflict 
selection_stmt: IF LEFTP expression RIGHTP stmt {$$ = new SelectionStmtAST(); $$->children.push_back($3); $$->children.push_back($5);}		
			  | IF LEFTP expression RIGHTP stmt ELSE stmt {$$ = new SelectionStmtAST(); $$->children.push_back($3); $$->children.push_back($5); $$->children.push_back($7);} 
			  ;

// while
iteration_stmt: WHILE LEFTP expression RIGHTP stmt {$$ = new IterationStmtAST(); $$->children.push_back($3); $$->children.push_back($5);}			
			  ;

// returnvariable
return_stmt: RETURN SEMICOLON {$$ = new ReturnStmtAST();}											
		   | RETURN expression SEMICOLON {$$ = new ReturnStmtAST(); $$->children.push_back($2);}	
		   ;

// expression
expression: variable ASSIGN expression {$$ = new BinaryOpAST(OPASSIGN); $$->children.push_back($1); $$->children.push_back($3);}
		  | relation_expr {$$ = $1;}
		  ;

// variable that could appear on the left of a operator
variable: IDENTIFIER {$$ = new RefAST(*$1, REFVAR);}
		| IDENTIFIER LEFTSB expression RIGHTSB {$$ = new ArraySubscriptExpr(); $$->children.push_back(new RefAST(*$1, REFVAR)); $$->children.push_back($3);}							//Clang does not print more info
		;

relation_expr: relation_expr LE addition { $$ = new BinaryOpAST(OPLE); $$->children.push_back($1); $$->children.push_back($3);}
			 | relation_expr LT addition { $$ = new BinaryOpAST(OPLT); $$->children.push_back($1); $$->children.push_back($3);}
			 | relation_expr GT addition { $$ = new BinaryOpAST(OPGT); $$->children.push_back($1); $$->children.push_back($3);}
			 | relation_expr GE addition { $$ = new BinaryOpAST(OPGE); $$->children.push_back($1); $$->children.push_back($3);}
			 | relation_expr EQ addition { $$ = new BinaryOpAST(OPEQ); $$->children.push_back($1); $$->children.push_back($3);}
			 | relation_expr NEQ addition {$$ = new BinaryOpAST(OPNEQ); $$->children.push_back($1); $$->children.push_back($3);}
		     | addition {$$ = $1;}
		     ;


// + or -
addition: addition ADD term { $$ = new BinaryOpAST(OPADD); $$->children.push_back($1); $$->children.push_back($3);}
		| addition SUB term { $$ = new BinaryOpAST(OPSUB); $$->children.push_back($1); $$->children.push_back($3);}
		| term {$$ = $1;}
		;

// * or /
term: term MUL factor { $$ = new BinaryOpAST(OPMUL); $$->children.push_back($1); $$->children.push_back($3);}
	| term DIV factor { $$ = new BinaryOpAST(OPDIV); $$->children.push_back($1); $$->children.push_back($3);}
	| factor {$$ = $1;}
	;

factor: LEFTP expression RIGHTP {$$ = $2;}
	  | SUB factor %prec UMINUS {$$ = new UnaryOpAST(OPUMINUS); $$->children.push_back($2); }
	  | variable {$$ = $1;}
	  | call {$$ = $1;}									
	  | value {$$ = $1;}
	  ;

value: INTEGER_VALUE {$$ = new IntegerAST(stoi(*$1));}
	 | FLOAT_VALUE {$$ = new FloatAST(stof(*$1));}	
	 | STRING_VALUE {$$ = new StringAST(*$1);}	
	 | TRUE {$$ = new BoolAST(true);}
	 | FALSE {$$ = new BoolAST(false);}
	 | CHAR_VALUE {$$ = new CharAST(*$1);}
	 ;

// function call
call: IDENTIFIER LEFTP args RIGHTP {$$ = new CallExpr(); $$->children.push_back(new RefAST(*$1, REFFUNC));if($3) $$->children.push_back($3); }					
	;

// args of a function call
args: arg_list {$$ = $1;}										
	| {$$ = nullptr;}
	;

arg_list: arg_list COMMA expression {$$ = $1; dynamic_cast<ArgsList *>$$->addvar(dynamic_cast<BaseAST *>$3);}					
		| expression {$$ = new ArgsList(); dynamic_cast<ArgsList *>$$->addvar(dynamic_cast<BaseAST *>$1);}
		;

%%


int yyerror(const char *s)
{
	error("%s", s);
	return 0;
}

